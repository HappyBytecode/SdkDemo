package anda.travel.driver.module.main.duty;import android.app.Dialog;import android.app.NotificationManager;import android.content.Context;import android.os.Build;import android.text.TextUtils;import com.alibaba.fastjson.JSON;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import java.util.HashMap;import java.util.Timer;import java.util.TimerTask;import javax.inject.Inject;import anda.travel.driver.BuildConfig;import anda.travel.driver.R;import anda.travel.driver.baselibrary.network.RequestError;import anda.travel.driver.baselibrary.utils.DateUtil;import anda.travel.driver.baselibrary.utils.RxUtil;import anda.travel.driver.baselibrary.utils.ToastUtil;import anda.travel.driver.common.BasePresenter;import anda.travel.driver.config.DutyStatus;import anda.travel.driver.config.HxErrorCode;import anda.travel.driver.config.OrderStatus;import anda.travel.driver.config.RemindType;import anda.travel.driver.config.TimeType;import anda.travel.driver.config.WarnType;import anda.travel.driver.data.dispatch.DispatchRepository;import anda.travel.driver.data.duty.DutyRepository;import anda.travel.driver.data.entity.DriverEntity;import anda.travel.driver.data.entity.OrderEntity;import anda.travel.driver.data.entity.OrderListenerEntity;import anda.travel.driver.data.entity.WarningContentEntity;import anda.travel.driver.data.order.OrderRepository;import anda.travel.driver.data.user.UserRepository;import anda.travel.driver.event.DutyEvent;import anda.travel.driver.event.MessageEvent;import anda.travel.driver.event.NetworkEvent;import anda.travel.driver.event.OrderEvent;import anda.travel.driver.module.main.home.HomeOngoingUtil;import anda.travel.driver.module.vo.OrderVO;import anda.travel.driver.socket.SocketEvent;import anda.travel.driver.socket.SocketPushContent;import anda.travel.driver.sound.SoundUtils;import anda.travel.driver.util.SpeechUtil;import anda.travel.driver.view.CommonBottomSheetDialog;import anda.travel.driver.widget.BaseTipsDialog;import anda.travel.driver.widget.NoticeDialog;import rx.Observable;import timber.log.Timber;/** * 功能描述： */public class DutyPresenter extends BasePresenter implements DutyContract.Presenter {    private final static int INTERVAL = 30 * 1000; //定时获取可抢订单    private final DutyContract.View mView;    private final DutyRepository mDutyRepository;    private final OrderRepository mOrderRepository;    private final UserRepository mUserRepository;    private final DispatchRepository mDispatchRepository;    private boolean mIsFront;    public boolean isFaceChecking = false;//是否正在人脸验证中    Timer timer = new Timer();    TimerTask countDownTask;    @Inject    public DutyPresenter(DutyContract.View view, DutyRepository dutyRepository, OrderRepository orderRepository,                         UserRepository userRepository, DispatchRepository dispatchRepository) {        mView = view;        mDutyRepository = dutyRepository;        mOrderRepository = orderRepository;        mUserRepository = userRepository;        mDispatchRepository = dispatchRepository;    }    /**     * 在OnResume时调用     */    @Override    public void subscribe() {        super.subscribe();        mIsFront = true;        mDutyRepository.homeResume(); //非行程中        reqDutyStatus(true); //获取出车状态        Timber.e("－－－－ 开启定时 －－－－");        startTimeTask();    }    private void startTimeTask() {        if (countDownTask != null) {            countDownTask.cancel();        }        countDownTask = new TimerTask() {            @Override            public void run() {                Timber.e("－－－－ 执行 －－－－");                if (!mIsFront) return; //当前未显示，则不执行                reqDutyStatus(true); //获取出车状态            }        };        timer.schedule(countDownTask, 0, INTERVAL);    }    @Override    public void unsubscribe() {        super.unsubscribe();        mIsFront = false;        Timber.e("－－－－ 关闭定时 －－－－");    }    public void stopTimer() {        if (timer != null) {            timer.cancel();        }    }    @Override    public void reqDutyStatus(boolean onlyFromRemote) {        mDisposable.add(mDutyRepository.reqDutyStatus(onlyFromRemote)                .compose(RxUtil.applySchedulers())                .subscribe(s -> {                    if (DutyStatus.ON_DUTY.equals(s)) {                        mView.showOnDuty();                    } else {                        mView.showOffduty();                    }                }, ex -> showNetworkError(ex, R.string.network_error, mView, mUserRepository)));    }    @Override    public void reqOnDuty(String bizId) {        mView.setOnDutyEnable(false);        isFaceChecking = false;        mDisposable.add(mDutyRepository.reqOnDuty(false, null, bizId)                .compose(RxUtil.applySchedulers())                .doOnSubscribe(() -> mView.showLoadingViewWithDelay(true))                .doAfterTerminate(mView::hideLoadingView)                .subscribe(s -> {                    mView.setOnDutyEnable(true);                    SoundUtils.getInstance().play(R.raw.speech_order_duty_on);                    mView.showOnDuty(); //显示"出车"                    EventBus.getDefault().post(new SocketEvent(SocketEvent.UPLOAD_LOCATION_RIGHT_NOW)); //立即上传司机位置                }, ex -> {                    mView.setOnDutyEnable(true);                    if (ex instanceof RequestError) {                        if (((RequestError) ex).getReturnCode() == HxErrorCode.DRIVER_DUTY_ERROR) {                            mView.showForceDutyOnNotice(((RequestError) ex).getMsg());                            return;                        } else if (((RequestError) ex).getReturnCode() == HxErrorCode.NO_FACE_DATA_ERROR) {//没有人脸信息                            mView.toast(((RequestError) ex).getMsg());                        } else if (((RequestError) ex).getReturnCode() == HxErrorCode.NEED_FACE_VERIFY_ERROR) {//需要人脸认证                            getVerifyToken(false);                            mView.setOnDutyEnable(false);                            isFaceChecking = true;                            return;                        } else if (((RequestError) ex).getReturnCode() == HxErrorCode.FEMALE_NIGHT_WORK_ERROR) {                            ///////////禁止女司机夜间出车                            String msg = ((RequestError) ex).getMsg();                            if (!TextUtils.isEmpty(msg)) {                                female_forbidden_notice(msg);                            }                            return;                        } else if (((RequestError) ex).getReturnCode() == HxErrorCode.NO_STUDY) {                            ////////弹出去往司机课堂弹框                            new CommonBottomSheetDialog.Builder(mView.getContext(), R.layout.hxyc_dialog_bottom_sheet_study)                                    .setConfirmListener(Dialog::dismiss)                                    .show();                            return;                        }                    }                    showNetworkError(ex, R.string.network_error, mView, mUserRepository);                }));    }    ///////////禁止女司机出车提醒    private void female_forbidden_notice(String msg) {        BaseTipsDialog mBaseTipsDialog = new BaseTipsDialog(mView.getContext());        mBaseTipsDialog.setTipsTitle("温馨提示");        mBaseTipsDialog.setTipsContent(msg);        mBaseTipsDialog.setConfirmText("我知道了");        mBaseTipsDialog.show();    }    @Override    public void getVerifyToken(boolean isForce) {        mDisposable.add(mUserRepository.getVerifiedToken()                .compose(RxUtil.applySchedulers())                .doOnSubscribe(() -> mView.showLoadingView(true))                .doAfterTerminate(mView::hideLoadingView)                .subscribe(verifyToken -> {                    if (verifyToken != null) {                        mView.getTokenSuccess(isForce, verifyToken.bizId, verifyToken.verifyToken);                    } else {                        mView.setOnDutyEnable(true);                        ToastUtil.getInstance().toast(R.string.network_error);                    }                }, ex -> {                    ex.printStackTrace();                    mView.setOnDutyEnable(true);                    showNetworkError(ex, R.string.network_error, mView, mUserRepository);                }));    }    @Override    public void forceReqOnDuty(String bizId) {        mView.setOnDutyEnable(false);        isFaceChecking = false;        mDisposable.add(mDutyRepository.reqOnDuty(true, null, bizId)                .compose(RxUtil.applySchedulers())                .doOnSubscribe(() -> mView.showLoadingViewWithDelay(true))                .doAfterTerminate(mView::hideLoadingView)                .subscribe(s -> {                    mView.setOnDutyEnable(true);                    SoundUtils.getInstance().play(R.raw.speech_order_duty_on);                    mView.showOnDuty(); //显示"出车"                    EventBus.getDefault().post(new SocketEvent(SocketEvent.UPLOAD_LOCATION_RIGHT_NOW)); //立即上传司机位置                }, ex -> {                    mView.setOnDutyEnable(true);                    if (ex instanceof RequestError) {                        if (((RequestError) ex).getReturnCode() == HxErrorCode.DRIVER_DUTY_ERROR) {                            mView.showForceDutyOnNotice(((RequestError) ex).getMsg());                            return;                        } else if (((RequestError) ex).getReturnCode() == HxErrorCode.NO_FACE_DATA_ERROR) {//没有人脸信息                        } else if (((RequestError) ex).getReturnCode() == HxErrorCode.NEED_FACE_VERIFY_ERROR) {//需要人脸认证                            getVerifyToken(true);                            mView.setOnDutyEnable(false);                            isFaceChecking = true;                            return;                        }                        showNetworkError(ex, R.string.network_error, mView, mUserRepository);                    }                }));    }    @Override    public void forceOffDuty(String notice) {        mDutyRepository.setIsOnDuty(false);        mView.showOffduty();        EventBus.getDefault().post(new SocketEvent(SocketEvent.UPLOAD_LOCATION_RIGHT_NOW)); //立即上传司机位置        mView.showForceOffDuty(notice);    }    @Override    public void reqOffDuty(boolean showVoice, boolean isForce) {        mDisposable.add(mDutyRepository.reqOffDuty(isForce)                .compose(RxUtil.applySchedulers())                .doOnSubscribe(() -> mView.showLoadingViewWithDelay(true))                .doAfterTerminate(mView::hideLoadingView)                .subscribe(s -> {                    if (showVoice) {                        SoundUtils.getInstance().play(R.raw.speech_order_duty_off);                    }                    mDutyRepository.setIsOnDuty(false);                    mView.showOffduty(); //显示"收车"                    EventBus.getDefault().post(new SocketEvent(SocketEvent.UPLOAD_LOCATION_RIGHT_NOW)); //立即上传司机位置                }, ex -> showNetworkError(ex, R.string.network_error, mView, mUserRepository)));    }    @Override    public void reqOrderDetail(String orderUuid, final boolean isDistribute, boolean isRedistribute, final Integer loops, final Integer loopCnt) {        if (!isMatchCondition()) return;  // 1.当前页正显示 2.或 应用处于后台 才弹出订单        /* 先判断是否已出车，再执行获取订单详情的操作 */        mDisposable.add(mDutyRepository                .reqDutyStatus(false)                .compose(RxUtil.applySchedulers())                .flatMap(s -> {                    if (DutyStatus.ON_DUTY.equals(s))                        return mOrderRepository.reqOrderDetail(orderUuid).compose(RxUtil.applySchedulers()); //已出车，获取订单详情                    else return Observable.empty(); //未出车，返回空                })                .subscribe(entity -> {                    if (!isMatchCondition(entity)) return;  // 1.当前页正显示 2.或 应用处于后台 才弹出订单                    OrderVO vo = OrderVO.createFrom(entity);                    vo.setDistribute(isDistribute); //记录是否为派单                    //20180727 设置是否为改派订单                    vo.setRedistribute(isRedistribute);                    vo.setLoops(loops); //记录阶段数                    vo.setLoopCnt(loopCnt); //记录阶段轮数                    popupOrderLogic(vo);                }, ex -> {                    //不处理                }));    }    @Override    public void warnCallback(String type, String warnUuid) {        mDisposable.add(mUserRepository.warnCallback(type, warnUuid)                .compose(RxUtil.applySchedulers())                .subscribe(entity -> {                }, ex -> {                }));    }    @Override    public void getWarning() {        mDisposable.add(mUserRepository.getWarning()                .compose(RxUtil.applySchedulers())                .subscribe(warningEntity -> {                    WarningContentEntity entity = new WarningContentEntity();                    entity.setWarnUuid(warningEntity.getUuid());                    entity.setWarnContent(warningEntity.getWarnContent());                    warnCallback(WarnType.RECIEVED, entity.getWarnUuid());                    mView.showWarningInfo(entity);                }, ex -> {                }));    }    @Override    public void testSystemPush() {        if (BuildConfig.DEBUG && mUserRepository.getDebugEmulator()) {            // 只有调试模式，才能执行           /* HashMap<String, String> params = new HashMap<>();            params.put("uuid", mUserRepository.getUserUuid());            params.put("type", "1");// Integer	消息类型 （1.系统消息 、2.反馈回复、3.订单相关、4.账单相关）            params.put("orderUuid", "");            params.put("typeStr", "系统通知");            params.put("content", "测试推送成功");            params.put("linkUrl", "https://www.baidu.com/");            params.put("pushTime", "" + System.currentTimeMillis());            mUserRepository.testSystemPush(params)                    .compose(RxUtil.applySchedulers())                    .doOnSubscribe(() -> mView.showLoadingViewWithDelay(true))                    .doAfterTerminate(() -> mView.hideLoadingView())                    .subscribe(s -> {                        Timber.d("testSystemPush 执行成功");                    }, ex -> {                        Timber.e("testSystemPush 出现异常");                    });*/        }    }    @Override    public void refuseOrder(HashMap<String, String> params) {        mDisposable.add(mOrderRepository.refuseOrder(params)                .compose(RxUtil.applySchedulers())                .subscribe(s -> Timber.d("refuseOrder调用成功")                        , ex -> Timber.e("refuseOrder调用失败")));    }    @Override    public OrderListenerEntity getListenerSetting() {        return mDutyRepository.getListenerSetting(mUserRepository.getUserUuid());    }    @Override    public DriverEntity getDriverEntityFromLocal() {        return mUserRepository.getUserInfoFromLocal();    }    @Override    public void openOrderSetting() {        mView.openOrderSetting();    }    /**     * 是否符合条件：true－符合条件，弹出订单、false－不符合条件，不弹出     *     * @return     */    private boolean isMatchCondition() {        if (HomeOngoingUtil.isOrderOngoing()) return false; //首页有进行中订单弹窗时，不弹窗新订单        if (mUserRepository.isReportAll()) { //全部播报            if (mDutyRepository.getIsOrderOngoing())                return false; //有进行中订单，不弹出            if (!(mUserRepository.isOnSetting()))                return true; //不在"设置页"或"咨询页"，则弹出            return mView.isBackground(); //在后台，则弹出        } else { //仅在首页播报            return (mIsFront                    ||                    (!(mDutyRepository.getIsOrderOngoing())                            &&                            (mDispatchRepository.getIsDispatchDisplay() || mView.isBackground())));        }    }    /**     * 是否符合条件：true－符合条件，弹出订单、false－不符合条件，不弹出     *     * @param entity 订单详情     * @return     */    private boolean isMatchCondition(OrderEntity entity) {        if (entity == null) return false;        boolean isMatchCondition = isMatchCondition(); //是否符合条件        if (!isMatchCondition) return false; //不符合条件，返回false        //预约单 且 在行程中  不弹出订单        if (entity.typeTime == TimeType.APPOINTMENT && mDutyRepository.getIsOrderOngoing()) {            return false;        }        OrderListenerEntity setting = mDutyRepository.getListenerSetting(mUserRepository.getLocalDriverUuid());        int remindType = setting.getRemindType(); //获取订单类型        if (remindType == RemindType.REALTIME.getType()) { //只收听实时单            //判断是否为实时订单            return entity.typeTime == TimeType.REALTIME;        } else if (remindType == RemindType.APPOINT.getType()) { //只收听预约单            if (entity.typeTime != TimeType.APPOINTMENT) return false;            return isOrderTimeMatchCondition(setting, entity.departTime);        } else { //收听全部订单            if (entity.typeTime == TimeType.APPOINTMENT) { //是预约订单，但不符合条件，返回false                return isOrderTimeMatchCondition(setting, entity.departTime);            }        }        return true;    }    /**     * 预约订单的出发时间，是否符合设置的预约时间段     *     * @param setting     * @param departTime     * @return     */    private boolean isOrderTimeMatchCondition(OrderListenerEntity setting, Long departTime) {        if (departTime == null) return false;        long currentTime = System.currentTimeMillis(); //当前时间        Long startTime = setting.getStartTime();        if (startTime != null && currentTime < startTime) {            if (departTime < startTime) return false; //有效时间内，departTime小于"开始时间"，则不弹出        }        Long endTime = setting.getEndTime();        if (endTime != null && currentTime < endTime) {            return departTime <= endTime; //有效时间内，departTime大于"结束时间"，则不弹出        }        return true;    }    public void onCreate() {        EventBus.getDefault().register(this);        getWarning();    }    public void onDestory() {        stopTimer();        EventBus.getDefault().unregister(this);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onOrderEvent(OrderEvent event) {        switch (event.type) {            case OrderEvent.ORDER_PUSH: //收到推送订单，先获取订单详情                dealwithNewOrder(event, false, false);                break;            case OrderEvent.ORDER_DISTRIBUTE: //派单                /////2020 8 18 根据本地配置判断是抢单还是派单模式.因为抢单还是派单后台都用这个推                int pushType = mUserRepository.getPushType();                dealwithNewOrder(event, 1 == pushType, false);                break;            case OrderEvent.ORDER_DISTRIBUTE_TO_OTHER:                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                    NotificationManager manager = (NotificationManager) mView.getContext()                            .getSystemService(Context.NOTIFICATION_SERVICE);                    manager.cancel(10);                }                break;            case OrderEvent.ORDER_CHANGE_DISTRIBUTE: //改派订单                dealwithNewOrder(event, true, true);                break;            case OrderEvent.DUTY_OREDER_ONGOING: //有订单正在进行中                if (event.obj1 == null) return;                //mIsOrderOngoing = (boolean) event.obj1;                break;            case OrderEvent.ORDER_REFUSE: //拒绝派单                if (event.obj1 == null) return;                refuseOrder((HashMap<String, String>) event.obj1);                break;            case OrderEvent.FORCE_ORDER: //强制派单            case OrderEvent.DISPATCH_ORDER:                if (event.obj1 == null) return;                forceOrder((String) event.obj1);                break;            case OrderEvent.ORDER_SYSTEM_DIRECTLY:                if (event.obj1 == null) return;                dealWithOrderDirectly(event);                break;            default:                break;        }    }    ///////美团派单    private void dealWithOrderDirectly(OrderEvent event) {        if (event.obj1 == null) return;        SocketPushContent push = (SocketPushContent) event.obj1;        if (push.data == null) return;        Integer loops = push.data.loops; // 阶段数        Integer loopCnt = push.data.loopCnt; //阶段轮数        Integer rewardFlag = push.data.rewardFlag;//是否美团奖励        if (push.data.orderDetailBean == null) {            /* 先判断是否已出车，再执行获取订单详情的操作 */            mDisposable.add(mDutyRepository                    .reqDutyStatus(false)                    .compose(RxUtil.applySchedulers())                    .flatMap(s -> {                        if (DutyStatus.ON_DUTY.equals(s))                            return mOrderRepository.reqOrderDetail(push.orderUuid).compose(RxUtil.applySchedulers()); //已出车，获取订单详情                        else return Observable.empty(); //未出车，返回空                    })                    .subscribe(entity -> {                        if (!isMatchCondition(entity)) return;  // 1.当前页正显示 2.或 应用处于后台 才弹出订单                        //if (entity.subStatus == OrderStatus.WAIT_REPLY) { // 4月20日 去掉该判断，以免后续要弹出的订单状态有改变                        OrderVO vo = OrderVO.createFrom(entity);                        vo.setDistribute(true); //记录是否为派单                        vo.setLoops(loops); //记录阶段数                        vo.setLoopCnt(loopCnt); //记录阶段轮数                        vo.setRewardFlag(rewardFlag);//记录是否是美团奖励                        mView.openOrderPopup(vo.uuid, vo);                        //}                    }, ex -> {                        //不处理                    }));            return;        }        OrderVO vo = OrderVO.createFrom(push.data.orderDetailBean);        vo.setDistribute(true); //记录是否为派单        vo.setLoops(loops); //记录阶段数        vo.setLoopCnt(loopCnt); //记录阶段轮数        vo.setRewardFlag(rewardFlag);//记录是否是美团奖励        mView.openOrderPopup(vo.uuid, vo);    }    private void dealwithNewOrder(OrderEvent event, boolean isDistribute, boolean isRedistribute) {        if (event.obj1 == null) return;        SocketPushContent push = (SocketPushContent) event.obj1;        if (push.data == null) return;        Integer loops = push.data.loops; // 阶段数        Integer loopCnt = push.data.loopCnt; //阶段轮数        if (push.data.orderDetailBean == null) {            reqOrderDetail(push.orderUuid, isDistribute, isRedistribute, loops, loopCnt); //尝试获取订单详情            return;        }        openOrderPopup(push.data.orderDetailBean, isDistribute, isRedistribute, loops, loopCnt);    }    private void openOrderPopup(OrderEntity entity,                                Boolean isDistribute, Boolean isRedistribute,                                Integer loops, Integer loopCnt) {        if (isDistribute == null) return;        // 1.当前页正显示 2.或 应用处于后台 才弹出订单        if (!isMatchCondition(entity)) return;        OrderVO vo = OrderVO.createFrom(entity);        vo.setDistribute(isDistribute); //记录是否为派单        vo.setRedistribute(isRedistribute); //记录是否为改派订单        vo.setLoops(loops); //记录阶段数        vo.setLoopCnt(loopCnt); //记录阶段轮数        popupOrderLogic(vo);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onNetworkEvent(NetworkEvent event) {        switch (event.type) {            case NetworkEvent.CONNECT:                mView.showNetworkDisconnect(false);                break;            case NetworkEvent.DISCONNECT:                mView.showNetworkDisconnect(true);                break;        }    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onDutyEvent(DutyEvent event) {        switch (event.type) {            case DutyEvent.FORCE_OFF_DUTY:                forceOffDuty((String) event.obj1);                break;            case DutyEvent.ON_DUTY:                reqOnDuty(null);                break;            case DutyEvent.OFF_DUTY:                reqOffDuty(true, true);                break;            case DutyEvent.SYS_OFF_DUTY:                reqOffDuty(false, false);                break;            case DutyEvent.REFRESH_DUTY:                reqDutyStatus(true);                break;            case DutyEvent.FEMALE_FORBIDDEN_NIGHT:                mDutyRepository.setIsOnDuty(false);                mView.showOffduty(); //显示"收车"                EventBus.getDefault().post(new SocketEvent(SocketEvent.UPLOAD_LOCATION_RIGHT_NOW));                break;        }    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onSocketEvent(SocketEvent event) {        if (event.type == SocketEvent.KNOCKOFF) {            mDutyRepository.setIsOnDuty(false);            SoundUtils.getInstance().play(R.raw.speech_order_duty_off);            mView.showOffduty(); //显示"收车"            NoticeDialog noticeDialog = new NoticeDialog(mView.getContext());            noticeDialog.setNoticeTitle(mView.getContext().getString(R.string.duty_title)).                    setNoticeContent(mView.getContext().getString(R.string.duty_content))                    .setImageRes(R.drawable.ic_notice_car)                    .setCancelText(mView.getContext().getString(R.string.continue_work))                    .setCancelListener(() -> {                        ////重新出车                        reqOnDuty(null);                    })                    .setConfirmText(mView.getContext().getString(R.string.fine)).setConfirmListener(() -> {            });            noticeDialog.show();        }    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onMessageEvent(MessageEvent event) {        switch (event.type) {            case MessageEvent.SYS_WARNING:   //收到系统警告 弹窗并收车                if (event.obj1 == null) return;                if (event.obj1 instanceof String) {                    EventBus.getDefault().post(new DutyEvent(DutyEvent.SYS_OFF_DUTY));                    WarningContentEntity entity = JSON.parseObject((String) event.obj1, WarningContentEntity.class);                    warnCallback(WarnType.RECIEVED, entity.getWarnUuid());                    mView.showWarningInfo(entity);                }                break;            case MessageEvent.SYS_WARNING_READ:                mView.dismissWarningInfo();                break;            case MessageEvent.ACT_HTML_ON:  // 有H5活动                mUserRepository.setHtmlModule(null);                break;        }    }    //被强制派单    private void forceOrder(String orderUuid) {        mDispatchRepository.dispatchComplete(orderUuid); //结束调度        mDisposable.add(mOrderRepository.reqOrderDetail(orderUuid)                .compose(RxUtil.applySchedulers())                .map(OrderVO::createFrom)                .subscribe(vo -> {                    reportForceOrder(vo); //播报订单信息                    if (isMatchCondition()) { //是否符合条件                        vo.setDistribute(true);                        vo.setRedistribute(true);                        vo.mainStatus = OrderStatus.ORDER_MAIN_STATUS_DOING;                        if (vo.typeTime == TimeType.APPOINTMENT) {                            vo.subStatus = OrderStatus.WAIT_BEGIN_APPOINTMENT;                        } else {                            vo.subStatus = OrderStatus.WAIT_ARRIVE_ORIGIN;                        }                        mView.openOrderPopup(vo.uuid, vo);                    }                }, ex -> showNetworkError(ex, R.string.network_error, mView, mUserRepository)));    }    //播报强制派单的信息    private void reportForceOrder(OrderVO vo) {        StringBuilder str = new StringBuilder();        str.append("指派订单");        if (vo.typeTime == TimeType.REALTIME) {            str.append("，实时");        } else {            str.append("，预约，" + DateUtil.getTodayOrTomorrow(vo.departTime));        }        str.append("，从" + vo.getOriginAddress() + "到" + vo.getDestAddress());        String strTip = vo.getStrTip();        if (!TextUtils.isEmpty(strTip)) {            str.append("，调度费" + strTip + "元");        }        if (!TextUtils.isEmpty(vo.remark)) {            str.append("，" + vo.remark);        }        SpeechUtil.speech(mView.getContext(), str.toString());    }    /////判断是派单还是抢单模式，如果是派单模式，则直接调用接口，请求成功弹出页面，失败的时候不做处理    ////抢单模式下照常弹出页面    private void popupOrderLogic(OrderVO vo) {        /////////如果是改派的        if (vo.getRedistribute()) {            HashMap<String, String> params = new HashMap<>();            params.put("orderUuid", vo.uuid); //订单编号            params.put("loops", String.valueOf(vo.getLoops())); //阶段数            params.put("loopCnt", String.valueOf(vo.getLoopCnt())); //阶段轮数            params.put("operateCode", "2"); //接受派单（1、手动接单，2、自动接单）            Observable<OrderEntity> obs = mOrderRepository.acceptRedistributeOrder(params); //接受改派订单            mDisposable.add(obs                    .map(OrderVO::createFrom)                    .compose(RxUtil.applySchedulers())                    .subscribe(data -> {                        data.setDistribute(true);                        data.setRedistribute(true);                        data.setLoops(vo.loops);                        data.setLoopCnt(vo.loopCnt);                        mView.openOrderPopup(data.uuid, data);                    }, Throwable::printStackTrace));        } else {            if (vo.typeTime == TimeType.APPOINTMENT) {                mView.openOrderPopup(vo.uuid, vo); //弹出新订单弹窗            } else {                int pushType = mUserRepository.getPushType();                /////派单模式                if (1 == pushType || vo.getDistribute()) {                    HashMap<String, String> params = new HashMap<>();                    params.put("orderUuid", vo.uuid); //订单编号                    params.put("loops", String.valueOf(vo.getLoops())); //阶段数                    params.put("loopCnt", String.valueOf(vo.getLoopCnt())); //阶段轮数                    params.put("operateCode", "2"); //接受派单（1、手动接单，2、自动接单）                    Observable<OrderEntity> obs = mOrderRepository.acceptOrder(params); //接受派单                    mDisposable.add(obs                            .map(OrderVO::createFrom)                            .compose(RxUtil.applySchedulers())                            .subscribe(data -> {                                mView.openOrderPopup(data.uuid, data); //弹出新订单弹窗                            }, Throwable::printStackTrace));                } else {                    mView.openOrderPopup(vo.uuid, vo); //弹出新订单弹窗                }            }        }    }}